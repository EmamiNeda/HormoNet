## Hormone-Drug Interaction Risk Level Model Predictor

from collections import Counter
import pandas as pd
import numpy as np
from imblearn.under_sampling import NeighbourhoodCleaningRule
from sklearn.model_selection import train_test_split
import pandas
import matplotlib.pyplot as plt
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation
from keras.optimizers import SGD
from sklearn.model_selection import StratifiedKFold
from sklearn.decomposition import PCA
from sklearn.decomposition import IncrementalPCA
from keras import regularizers
from keras.wrappers.scikit_learn import KerasClassifier
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten
from keras.utils import to_categorical
import sklearn
import tensorflow as tf
from keras.layers import Dense
from keras.layers import Dropout
from keras.wrappers.scikit_learn import KerasClassifier
#from Sklearn.Cross_Validation import cross_val_score
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from keras.layers import Dense, Dropout, Activation
from imblearn.under_sampling import RandomUnderSampler
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from imblearn.over_sampling import SMOTE
from sklearn.preprocessing import LabelBinarizer
#from sklearn.cross_validation import train_test_split
#from sklearn.cross_validation import cross_val_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from keras.layers import Dense, Dropout
from keras.layers import Embedding
from keras.layers import Conv1D, GlobalAveragePooling1D, MaxPooling1D
from tensorflow.keras.layers import BatchNormalization

# Load_dataset
dataframe = pandas.read_csv('HDI_Risk_Level_Dataset.csv')
dataset = dataframe.values

x, y = dataset[:, 1:901], dataset[:, 0]
print(len(x))
print(len(y))
print(y)

y = LabelEncoder().fit_transform(y)

smote = SMOTE('minority')
x_resampled, y_resampled = smote.fit_resample(x, y)
print(len(x_resampled))
print(len(y_resampled))
print(y_resampled)

x_train, x_test, y_train, y_test = train_test_split(x_resampled,y_resampled,random_state=0)
y_train = LabelBinarizer().fit_transform(y_train)
y_test = LabelBinarizer().fit_transform(y_test)
print(len(y_train))
print(len(y_train))
print(y_train)


## Model
opt = keras.optimizers.RMSprop(lr=0.000025, rho=0.9, epsilon=None, decay=0.0)

model = Sequential()
model.add(Conv1D(128, 3, activation='relu', input_shape=(900, 1)))
model.add(Conv1D(128, 3, activation='relu'))
model.add(BatchNormalization())
model.add(Conv1D(128, 3, activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling1D(3, strides=2, padding='valid'))
model.add(Conv1D(128, 3, activation='relu'))
model.add(BatchNormalization())
model.add(Conv1D(128, 3, activation='relu'))
model.add(BatchNormalization())
model.add(GlobalAveragePooling1D())
model.add(Dropout(0.2))
model.add(Dense(128, activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(200))
model.add(Activation('relu'))
model.add(Dense(2))
model.add(Dense(numclasses, activation='softmax'))

model.compile(loss='categorical_crossentropy',
                optimizer= opt,
                metrics=['accuracy'])

## Estimator
model.fit(x_train, y_train,
          epochs=50,
          batch_size=16)
score = model.evaluate(x_train, y_train, batch_size=16)

