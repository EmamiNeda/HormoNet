## Hormone-Drug Interaction Model Predictor


from collections import Counter
import numpy as np
from imblearn.under_sampling import NeighbourhoodCleaningRule
from sklearn.model_selection import train_test_split
import pandas
import sklearn
import pandas as pd
import matplotlib.pyplot as plt
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation
from keras.optimizers import SGD
from sklearn.model_selection import StratifiedKFold
from sklearn.decomposition import PCA
from sklearn.decomposition import IncrementalPCA
from keras import regularizers
from keras.wrappers.scikit_learn import KerasClassifier
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten
from keras.utils import to_categorical
from collections import Counter
from keras.layers import Dense
from keras.layers import Dropout
from sklearn.model_selection import cross_val_score
from imblearn.under_sampling import NeighbourhoodCleaningRule
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from keras.layers import Dense, Dropout, Activation
from keras.optimizers import SGD
from imblearn.under_sampling import RandomUnderSampler
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from keras.layers import Dense, Dropout
from keras.layers import Embedding
from keras.layers import Conv1D, GlobalAveragePooling1D, MaxPooling1D



##Load dataset
dataset = pandas.read_csv('HDI_Dataset.csv')

x = dataset.iloc [: ,1:901]
y = dataset ['Class'] 

x_train, x_test, y_train, y_test = train_test_split(x,y,random_state=0)

## Model
opt = keras.optimizers.RMSprop(lr=0.000025, rho=0.9, epsilon=None, decay=0.0)

model = Sequential()
model.add(Conv1D(128, 3, activation='relu', input_shape=(900, 1)))
model.add(Conv1D(128, 3, activation='relu'))
model.add(Conv1D(128, 3, activation='relu')
model.add(MaxPooling1D(3))
model.add(Conv1D(128, 3, activation='relu'))
model.add(Conv1D(128, 3, activation='relu'))
model.add(GlobalAveragePooling1D())
model.add(Dropout(0.5))
model.add(Dense(128, activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy',
              optimizer = opt,
              metrics=['accuracy'])


## Estimator
model.fit(x_train, y_train,
          epochs=50,
          batch_size=16)
score = model.evaluate(x_train, y_train, batch_size=16)










